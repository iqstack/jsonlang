{% include 'header.html.jinja' %}

<p>Jsonlang is a domain specific configuration language that helps you define <a
href="http://www.json.org">JSON</a> data.  Jsonlang lets you compute fragments of JSON within the
structure, bringing the same benefit to structured data that templating languages bring to plain
text.  The example below illustrates a few
features -- referring to another part of the structure, overriding object fields, and string
operations.</p>

<table class="landing-page-example" cellspacing="0">
<tr>
<td>
<pre class="large"><code>{{ myinclude('../examples/landingpage.jsonlang') }}</code></pre>
</td>
<td>
<span class="bigarrow">âž¡</span>
</td>
<td>
<pre class="large"><code>{{ myinclude('../examples/landingpage.jsonlang.golden') }}</code></pre>
</td>
</tr>
</table>

<p>Use Jsonlang to organize your JSON data, or to help your users organize the data they send to you.
It is easy to integrate Jsonlang's library or commandline interpreter into existing systems that take
JSON or <a href="http://www.yaml.org">YAML</a>.  Some example situations are application
configuration (files in etc), build systems, package definitions, configuration management systems,
and cloud deployment agents.</p>

<h2>Variants</h2>

<p>Jsonlang is ideal when you need to derive new data from existing data with subtle changes.
This was hinted at in the above example.  A more comprehensive illustration is the simple build
configuration below.  An object <code>CCompiler</code> is defined, which is then specialized for GCC
and Clang.  These are used to help construct an array of build targets.</p>

<p>Note the example <a href="http://www.bracha.org/oopsla90.pdf">mixins</a> <code>Opt</code> and
<code>Dbg</code> that can be applied to add optimization flags.  Mixins are the ultimate form of
inheritance, as they can be combined arbitrarily via the <code>+</code> operator.  In simple cases,
they behave identically to conventional object-oriented languages like Java.</p>

<table class="landing-page-example" cellspacing="0">
<tr>
<td>
<pre class="large"><code>{{ myinclude('../examples/build_example.jsonlang') }}</code></pre>
<p class="try_it_out">Try it out <a href="demo.html">here
</a></p>
</td>
</tr>
</table>


<h2>Provenance, Copyright, License</h2>

<p>Jsonlang is based on Jsonnet, a Google 20% project. Jsonlang has been open-sourced under the <a
href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0</a> license. A large portion of the
current code was developed by David Cunningham - dcunnin@google.com under the Jsonnet project at Google.</p>

<h3>News</h3>

<p><b>July 17, 2015</b> JsonLang name changed and new functionality added!</p>

<p><b>July 10, 2015</b> Jsonnet was cloned and modifications added for the <a
href="http://github.com/iqstack">IQStack project</a>!</p>

{% include 'footer.html.jinja' %}
